#!/usr/bin/env ruby

require 'thor'
require 'droplet_kit'

##################
# Prime Settings #
##################

require_relative '.utilrc.rb'

class Util < Thor 
  desc "port [-o, -c, -p]", "Allows you to open or close a specific port"
  option  :open,
          :type => :boolean,
          :aliases => 'o'

  option  :close,
          :type => :boolean,
          :aliases => 'c'

  option  :port,
          :type => :string,
          :aliases => 'p'

  def port
    o = options
    port = o[:port].to_s
    
    if port.to_f.to_s == port || port.to_i.to_s == port then 
      if o[:open] then
        puts "Opening port '#{port}'..."
        `sudo /sbin/iptables -I INPUT -p tcp --dport #{port} -j ACCEPT`
      elsif o[:close] then 
        puts "Closing port '#{port}'..."
        `kill $(lsof -ti:#{port})`
      end
    else
      puts "Port must be numeric: #{port}"
    end
  end

  desc "server [-p, -d]", "Allows you to start a server in the current (or specefied) directory"
  option  :port,
          :type => :string,
          :aliases => 'p'

  option  :homedir,
          :type => :string,
          :default => SERVER_HOMEDIR,
          :aliases => 'd'

  def server
    o = options
    
    port = o[:port].to_s
    if port.to_f.to_s == port || port.to_i.to_s == port then
      
      if o[:homedir] then
        Dir.chdir o[:homedir]
      end 

      puts `util port -op #{port}`
      puts `ruby -run -e httpd . -p #{port}`
      puts `util port -cp #{port}`
    else
      puts "Port must be numeric: #{port}"
    end
  end
  
  desc "ssh [-e, -u, -f, -a, -l, -d]", "Allows you to perform ssh functions"
  option  :address,
          :type => :string,
          :default => SSH_ADDRESS,
          :aliases => 'a'
  
  option  :username,
          :type => :string,
          :aliases => 'u'
  
  option  :enter,
          :type => :boolean,
          :aliases => 'e'

  option  :ftp,
          :type => :boolean,
          :aliases => 'f'

  option  :homedir,
          :type => :string,
          :default => SSH_HOMEDIR,
          :aliases => 'l'

  option  :hostdir,
          :type => :string,
          :aliases => 'd'

  def ssh
    o = options
    address = o[:address] 
    host = o[:username] ? "#{o[:username]}@#{address}" : address
   
    if address then 
      if o[:ftp] then
        if o[:hostdir] then
          `sshfs #{host}:#{o[:hostdir]} #{o[:homedir]}`
        end
      end
      if o[:enter] then
        exec "ssh #{host}"
      end
    else
      puts "IP address is required"
    end
  end
  
    desc "ocean [-k, -u, -d, -r, -c, -s]", "Allows you to interact with the Digital Ocean API"
    
    option  :key,
            :type => :string,
            :default => OCEAN_KEY,
            :aliases => 'k'
    
    option  :remove,
            :type => :boolean,
            :aliases => 'r'

    option  :create,
            :type => :boolean,
            :aliases => 'c'
    
    option  :drop,
            :type => :string,
            :aliases => 'd'
    
    option  :snap,
            :type => :string,
            :aliases => 's'
    
    def ocean
        o = options
        if o[:key] && o[:drop] then
            client = DropletKit::Client.new(access_token: o[:key])
            drop = nil
            if o[:create] then
              if !o[:snap].blank? then
                image = nil
                images = client.images.all()
                images.each do |img|
                  if img.name == o[:snap]
                    image = img
                  end
                end
                
                if !image.blank? then
                  drop = DropletKit::Droplet.new(name: o[:drop], region: 'nyc3', image: image.id, size: '512mb')
                  created = client.droplets.create(drop)
                end
              else
                drop = DropletKit::Droplet.new(name: o[:drop], region: 'nyc3', image: 'ubuntu-14-04-x64', size: '512mb')
                created = client.droplets.create(drop)
              end
              
              if !drop.blank? then
                puts "#{drop.name} has been created#{o[:snap].blank? ? '' : " from snapshot '#{o[:snap]}'"}"
              end
            else
              if !o[:drop].blank? then
                drops = client.droplets.all
                drops.each do |d|
                  if d.name == o[:drop] || d.id.to_s == o[:drop] then
                    drop = d
                    break
                  end
                end
              end
              
              if o[:remove] then
                if !drop.blank? then
                  if !o[:snap].blank? then
                    client.droplet_actions.power_off(droplet_id: drop.id)
                    attempts = 0
                    while drop.status != 'off' do
                      sleep 1
                      drop = client.droplets.find(id: drop.id)
                    end
                    client.droplet_actions.snapshot(droplet_id: drop.id, name: "#{o[:snap]}-#{Time.now.to_i}")
                  end
                  
                  
                  client.droplets.delete(id: drop.id)
                  
                  puts "#{drop.name} has been removed#{o[:snap].blank? ? '' : " and snapshot '#{o[:snap]}' has been created"}"
                end
                
              elsif !drop.blank?
                puts "#{drop.name} found"
                puts drop.status
              end
              
            end
            if drop.blank? then
              puts "Something terrible has happened"
            end
        else
            puts "API key and drop details are required"
        end
    end
  
end

Util.start(ARGV)
