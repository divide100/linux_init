#!/usr/bin/env ruby

require 'thor'

##################
# Prime Settings #
##################

require_relative '.utilrc.rb'

class Util < Thor 
  desc "port [-o, -c, -p]", "Allows you to open or close a specific port"
  option  :open,
          :type => :boolean,
          :aliases => 'o'

  option  :close,
          :type => :boolean,
          :aliases => 'c'

  option  :port,
          :type => :string,
          :aliases => 'p'

  def port
    o = options
    port = o[:port].to_s
    
    if port.to_f.to_s == port || port.to_i.to_s == port then 
      if o[:open] then
        puts "Opening port '#{port}'..."
        `sudo /sbin/iptables -I INPUT -p tcp --dport #{port} -j ACCEPT`
      elsif o[:close] then 
        puts "Closing port '#{port}'..."
        `kill $(lsof -ti:#{port})`
      end
    else
      puts "Port must be numeric: #{port}"
    end
  end

  desc "server [-p, -d]", "Allows you to start a server in the current (or specefied) directory"
  option  :port,
          :type => :string,
          :aliases => 'p'

  option  :homedir,
          :type => :string,
          :default => PORT_HOMEDIR,
          :aliases => 'd'

  def server
    o = options
    
    port = o[:port].to_s
    if port.to_f.to_s == port || port.to_i.to_s == port then
      
      if o[:homedir] then
        Dir.chdir o[:homedir]
      end 

      puts `util port -op #{port}`
      puts `python -m SimpleHTTPServer #{port}`
      puts `util port -cp #{port}`
    else
      puts "Port must be numeric: #{port}"
    end
  end
  
  desc "ssh [-e, -u, -f, -a, -l, -d]", "Allows you to perform ssh functions"
  option  :address,
          :type => :string,
          :default => SSH_ADDRESS,
          :aliases => 'a'
  
  option  :username,
          :type => :string,
          :aliases => 'u'
  
  option  :enter,
          :type => :boolean,
          :aliases => 'e'

  option  :ftp,
          :type => :boolean,
          :aliases => 'f'

  option  :homedir,
          :type => :string,
          :default => SSH_HOMEDIR,
          :aliases => 'l'

  option  :hostdir,
          :type => :string,
          :aliases => 'd'

  def ssh
    o = options
    address = o[:address] 
    host = o[:username] ? "#{o[:username]}@#{address}" : address
   
    if address then 
      if o[:ftp] then
        if o[:hostdir] then
          `sshfs #{host}:#{o[:hostdir]} #{o[:homedir]}`
        end
      end
      if o[:enter] then
        exec "ssh #{host}"
      end
    else
      puts "IP address is required"
    end
  end
end

Util.start(ARGV)
